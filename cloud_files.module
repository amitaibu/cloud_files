<?php

/**
 * @file
 * Cloud file integration.
 */

/**
 * Get the Cloud files container entity by name
 *
 * @param $name
 *   The container name.
 *
 * @return
 *   A CloudFilesContainer entity if found, or FALSE.
 */
function cloud_files_get_container($name) {
  $cache = &drupal_static(__FUNCTION__, array());
  if (isset($cache[$name])) {
    return entity_load_single('cloud_files_container', $cache[$name]);
  }

  $cache[$name] = FALSE;
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'cloud_files_container')
    ->propertyCondition('name', $name, '=')
    ->range(0, 1)
    ->execute();

  if (empty($result['cloud_files_container'])) {
    return FALSE;
  }
  $cache[$name] = key($result['cloud_files_container']);
  return entity_load_single('cloud_files_container', $cache[$name]);
}

/**
 * Get the Cloud files container entity by name
 *
 * @param $name
 *   The container name.
 *
 * @return
 *   A CloudFilesContainer entity if found, or FALSE.
 */
function cloud_files_get_container_by_uri($uri) {
  $cache = &drupal_static(__FUNCTION__, array());
  if (isset($cache[$uri])) {
    return entity_load_single('cloud_files_container', $cache[$uri]);
  }

  $cache[$uri] = FALSE;
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'file')
    ->propertyCondition('uri', $uri, '=')
    ->range(0, 1)
    ->execute();

  if (empty($result['file'])) {
    return FALSE;
  }
  $fid = key($result['file']);
  $wrapper = entity_metadata_wrapper('file', $fid);
  if (empty($wrapper->cloud_files_container) || !$id = $wrapper->cloud_files_container->getIdentifier()) {
    return;
  }

  $cache[$uri] = $id;
  return $wrapper->cloud_files_container->value();
}

/**
 * Set image styles that were processed.
 */
function cloud_files_set_image_style_by_uri($uri, $style_name) {
  $cache = &drupal_static(__FUNCTION__, array());
  if (isset($cache[$uri])) {
    return $cache[$uri]['status'];
  }
  // Get the file.
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'file')
    ->propertyCondition('uri', $uri, '=')
    ->range(0, 1)
    ->execute();

  $fid = key($result['file']);
  $cache['uri']['fid'] = $fid;

  $wrapper = entity_metadata_wrapper('file', $cache['uri']['fid']);
  if ($existing = in_array($style_name, $wrapper->cloud_files_image_style->value())) {
    return $cache['uri']['status'] = $existing;
  }
  else {
    $cache['uri']['status'] = TRUE;
    $wrapper->cloud_files_image_style[] = $style_name;
    $wrapper->save();
  }
}

/**
 * Get or Set container for URI.
 *
 * @param $uri
 *   The uri to get or set.
 * @param $name
 *   Optional; The container name to set.
 *
 * @return
 *   If name is empty, return the container name if found, or the default
 *   contiainer.
 */
function cloud_files_container_cache($uri, $name = NULL) {
  $cache = &drupal_static(__FUNCTION__, array());
  if ($name) {
    $cache[$uri] = $name;
    return;
  }
  else {
    if (!empty($cache[$uri])) {
      return $cache[$uri];
    }
    elseif ($container = cloud_files_get_container_by_uri($uri)) {
      // Check if the URI belongs to an existing file.
      $cache[$uri] = $container->name;
    }
    else {
      // Default container.
      $cache[$uri] = variable_get('rackspace_cloud_container');
    }

    return $cache[$uri];
  }
}

/**
 * Upload a local file to Cloud files.
 *
 * @param $source
 *   URI or stream wrapper of the local file. e.g. public://foo.txt
 * @param $destination
 *   Optional; The destination name of the file e.g. foo.txt
 *   If empty the file name will be taken from the source.
 * @param $container_name
 *   Optional; The container name. If empty a default value will be used.
 *
 * @return
 *   TRUE if upload was sucessful.
 *
 * @see cloud_files_container_cache()
 */
function cloud_files_load_from_filename($source, $destination = NULL, $container_name = NULL) {
  // Move the file to the container.
  $auth = cloud_files_get_authentication();
  $conn = new CF_Connection($auth);

  // If no container name, check if it was registered in
  // cloud_files_container_cache().
  $container_name = $container_name ? $container_name : cloud_files_container_cache($uri);

  // If no destination given, use the source as the filename.
  $destination = $destination ? $destination : drupal_basename($source);

  $cf_container = $conn->get_container($container_name);
  $cf_file = $cf_container->create_object($destination);
  return $cf_file->load_from_filename(drupal_realpath($source));
}

/**
 * Implements hook_field_attach_presave();
 *
 * We use this hook instead of hook_file_presave() to make sure we are
 * setting the file type, after File entity module.
 *
 * Add reference to the container entity.
 */
function cloud_files_field_attach_presave($entity_type, $entity) {
  if ($entity_type != 'file') {
    return;
  }
  $file = $entity;
  if (strpos($file->uri, 'rcf://') !== 0) {
    return;
  }

  $file->type = 'cloud_files';
  if (empty($file->fid)) {
    $wrapper = entity_metadata_wrapper('file', $file);
    $name = cloud_files_container_cache($file->uri);
    $container = cloud_files_get_container($name);
    $wrapper->cloud_files_container->set($container);
  }
}

/**
 * Implements hook_file_type_info().
 */
function cloud_files_file_type_info() {
  return array(
    'cloud_files' => array(
      'label' => t('Cloud files'),
      'description' => t('Cloud files file.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function cloud_files_menu() {
  $items = array();
  $items['admin/config/media/cloud-files'] = array(
    'title' => 'Cloud Files',
    'description' => 'Cloud Files Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloud_files_admin_settings'),
    'access arguments' => array('administer cloud files'),
    'file' => 'includes/cloud_files.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permissions().
 */
function cloud_files_permissions() {
  return array(
    'administer cloud files' => array(
      'title' => t('Administer cloud files'),
      'description' => t('Administer cloud files settings'),
    ),
  );
}

/**
 * Implements hook_stream_wrappers().
 *
 * TODO: Improve requirements.
 * As we cannot use hook_requirements, since the library isn't defined yet
 * we don't load the streamwrappers.
 */
function cloud_files_stream_wrappers() {
  $info = libraries_load('rackspace');
  if (!empty($info['loaded'])) {
    return array(
      'rcf' => array(
        'name' => t('Rackspace Cloud Files'),
        'class' => 'RackspaceCloudFilesStreamWrapper',
        'description' => t('Rackspace Cloud Files.'),
      ),
    );
  }
}

/**
 * Implements hook_libraries_info().
 */
function cloud_files_libraries_info() {
  return array(
    'rackspace' => array(
      'title' => 'Rackspace Cloud Files PHP API',
      'vendor url' => 'https://github.com/rackspace/php-cloudfiles',
      'download url' => 'https://github.com/rackspace/php-cloudfiles',
      'path' => 'php-cloudfiles',
      'version arguments' => array(
        'file' => 'php-cloudfiles/Changelog',
        'pattern' => '/(\d+\.\d+(\.\d+)?)/',
      ),
      'files' => array(
        'php' => array(
          'cloudfiles.php',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_entity_info().
 */
function cloud_files_entity_info() {
  $items['cloud_files_container'] = array(
    'label' => t('Cloud files container'),
    'controller class' => 'EntityAPIController',
    'entity class' => 'CloudFilesContainer',
    'base table' => 'cloud_files_container',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'container_id',
      'label' => 'name',
    ),
    'bundles' => array(),
    'view modes' => array(
      'full' => array(
        'label' => t('Full'),
        'custom settings' => FALSE,
      ),
    ),
    'module' => 'cloud_files',

  );

  return $items;
}

/**
 * Get Cloud files authentication.
 */
function cloud_files_get_authentication() {
  $credentials = cache_get("rackspace_cloud_credentials");

  if ($credentials) {
    // Check the credentials are less than 1 day old.
    $created = new DateTime(date("r", $credentials->created));
    $now = new DateTime();
    $age = $now->diff($created);
    if ($age->d > 0) {
      if (variable_get('rackspace_cloud_debug')) {
        watchdog("cloud_files", "credentials are too old", NULL, WATCHDOG_DEBUG);
      }
      $credentials = NULL;
    }
  }

  if ($credentials) {
    if (variable_get('rackspace_cloud_debug')) {
      watchdog("cloud_files", "loading cached credentials", NULL, WATCHDOG_DEBUG);
    }

    $auth_token = $credentials->data['auth_token'];
    $storage_url = $credentials->data['storage_url'];
    $cdnm_url = $credentials->data['cdnm_url'];

    $auth = new CF_Authentication();
    $auth->load_cached_credentials($auth_token, $storage_url, $cdnm_url);
  }
  else {
    if (variable_get('rackspace_cloud_debug')) {
      watchdog("cloud_files", "Requesting Rackspace authentication", NULL, WATCHDOG_DEBUG);
    }
    $auth = new CF_Authentication(variable_get('rackspace_cloud_username'),
                                  variable_get('rackspace_cloud_api_key'),
                                  NULL,
                                  variable_get('rackspace_cloud_auth_url'));

    // @todo: handle no autheintication.
    $auth->authenticate();
    $credentials = $auth->export_credentials();

    cache_set("rackspace_cloud_credentials", $credentials, 'cache', CACHE_TEMPORARY);
  }

  return $auth;
}
